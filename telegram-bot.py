from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from datetime import datetime, timedelta
import logging
import json
import os
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –î–∞–Ω—ñ
user_data = {}
available_slots = {}
booked_numbers = {}

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ—ó –ø–æ—à—Ç–∏
SMTP_SERVER = "mx1.cityhost.com.ua"
SMTP_PORT = 587
EMAIL_ADDRESS = "telegram_bot@keramika.uz.ua"  # –ó–º—ñ–Ω—ñ—Ç—å –Ω–∞ –≤–∞—à—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É
EMAIL_PASSWORD = "Kachora3pab1*r"  # –ó–º—ñ–Ω—ñ—Ç—å –Ω–∞ –≤–∞—à –ø–∞—Ä–æ–ª—å
ADMIN_EMAILS = ["telegram_bot@keramika.uz.ua"]

def send_email_notification(user_name, phone_number, day, slot):
    try:
        subject = "–ù–æ–≤–∏–π –∑–∞–ø–∏—Å –Ω–∞ –¥–∏–∑–∞–π–Ω"
        body = (
            f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name} ({phone_number}) –∑–∞–ø–∏—Å–∞–≤—Å—è –Ω–∞ –¥–∏–∑–∞–π–Ω\n"
            f"–î–∞—Ç–∞: {day}\n–ß–∞—Å: {slot.replace('_', ':')}"
        )

        msg = MIMEMultipart()
        msg["From"] = EMAIL_ADDRESS
        msg["Subject"] = subject
        msg.attach(MIMEText(body, "plain"))

        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
            server.starttls()
            server.login(EMAIL_ADDRESS, EMAIL_PASSWORD)
            for admin_email in ADMIN_EMAILS:
                msg["To"] = admin_email
                server.send_message(msg)

        logger.info("–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –Ω–∞ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è: {e}")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–ª–æ—Ç—ñ–≤ –¥–ª—è –∑–∞–ø–∏—Å—É
def initialize_slots():
    today = datetime.now().date()
    start_date = today
    end_date = today + timedelta(days=7)  # –î–æ—Å—Ç—É–ø–Ω—ñ —Å–ª–æ—Ç–∏ —Ç—ñ–ª—å–∫–∏ –Ω–∞ 7 –¥–Ω—ñ–≤ –≤–ø–µ—Ä–µ–¥
    blocked_days = {2, 3, 7, 8, 13, 14, 20, 21, 27, 28}  # –ë–ª–æ–∫–æ–≤–∞–Ω—ñ –¥–Ω—ñ

    delta = timedelta(days=1)
    current_date = start_date

    while current_date <= end_date:
        date_str = current_date.strftime("%Y-%m-%d")
        day_of_month = current_date.day

        # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ –¥–Ω—ñ
        if day_of_month in blocked_days:
            current_date += delta
            continue

        day_slots = []
        for hour in range(9, 18):
            slot_start = datetime(current_date.year, current_date.month, current_date.day, hour)
            if slot_start > datetime.now() + timedelta(hours=2):
                day_slots.append(f"{hour:02d}_00-{hour+1:02d}_00")

        if day_slots:
            available_slots[date_str] = day_slots
        current_date += delta

# –°—Ç–∞—Ä—Ç
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[KeyboardButton("üì± –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É", request_contact=True)]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É.", reply_markup=reply_markup)

# –û–±—Ä–æ–±–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç—É
async def handle_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contact = update.message.contact
    phone_number = contact.phone_number

    user_data[update.effective_user.id] = {
        "name": contact.first_name,
        "phone_number": phone_number,
    }

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —ñ—Å–Ω—É—é—á–∏–π –∑–∞–ø–∏—Å
    if phone_number in booked_numbers:
        await update.message.reply_text(f"–í–∏ –≤–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ñ –Ω–∞ {booked_numbers[phone_number]['day']} –æ {booked_numbers[phone_number]['slot'].replace('_', ':')}.")
        return

    await update.message.reply_text(f"–î—è–∫—É—é, {contact.first_name}! –í–∫–∞–∂—ñ—Ç—å –í–∞—à–µ —ñ–º'—è.")

# –û–±—Ä–æ–±–∫–∞ —ñ–º–µ–Ω—ñ
async def handle_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    name = update.message.text.strip()

    if user_id in user_data:
        user_data[user_id]["full_name"] = name
        buttons = [InlineKeyboardButton(day, callback_data=f"day:{day}") for day in available_slots]
        reply_markup = InlineKeyboardMarkup([buttons[i:i+2] for i in range(0, len(buttons), 2)])
        await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –∑—Ä—É—á–Ω–∏–π –¥–µ–Ω—å –¥–ª—è –∑–∞–ø–∏—Å—É:", reply_markup=reply_markup)

# –í–∏–±—ñ—Ä –¥–Ω—è
async def handle_day_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    day = query.data.split(":")[1]

    if day in available_slots:
        buttons = [InlineKeyboardButton(slot, callback_data=f"slot:{day}:{slot}") for slot in available_slots[day]]
        reply_markup = InlineKeyboardMarkup([buttons[i:i+2] for i in range(0, len(buttons), 2)])
        await query.message.reply_text(f"–û–±–µ—Ä—ñ—Ç—å —á–∞—Å –Ω–∞ {day}:", reply_markup=reply_markup)

# –í–∏–±—ñ—Ä —á–∞—Å—É
async def handle_slot_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query.data:
        await query.message.reply_text("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    try:
        _, day, slot = query.data.rsplit(":", 2)
    except ValueError:
        await query.message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    user_id = query.from_user.id
    phone_number = user_data[user_id]["phone_number"]

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —ñ—Å–Ω—É—é—á–∏–π –∑–∞–ø–∏—Å
    if phone_number in booked_numbers:
        await query.message.reply_text(f"–í–∏ –≤–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ñ –Ω–∞ {booked_numbers[phone_number]['day']} –æ {booked_numbers[phone_number]['slot'].replace('_', ':')}.")
        return

    if slot in available_slots.get(day, []):
        available_slots[day].remove(slot)
        booked_numbers[phone_number] = {"day": day, "slot": slot}
        user_name = user_data[user_id].get("full_name", "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á")
        await query.edit_message_text(f"–í–∞—à –∑–∞–ø–∏—Å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ –Ω–∞ {day} –æ {slot.replace('_', ':')}.")

        # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –Ω–∞ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É
        send_email_notification(user_name, phone_number, day, slot)
    else:
        await query.message.reply_text("–¶–µ–π —Å–ª–æ—Ç –≤–∂–µ –∑–∞–π–Ω—è—Ç–∏–π. –û–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π.")

# –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
def main():
    TOKEN = "7890592508:AAGBVL2XvUewLkyDP1H9AW50d7hDa8hxom8"
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.CONTACT, handle_contact))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_name))
    app.add_handler(CallbackQueryHandler(handle_day_selection, pattern="^day:"))
    app.add_handler(CallbackQueryHandler(handle_slot_selection, pattern="^slot:"))

    initialize_slots()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")

WEBHOOK_URL = "https://blog.keramika.uz.ua/webhook"  # –ó–∞–º—ñ—Å—Ç—å —Ü—å–æ–≥–æ –≤—Å—Ç–∞–≤—Ç–µ —Å–≤—ñ–π URL –≤–µ–±—Ö—É–∫–∞

async def set_webhook():
    await app.bot.set_webhook(WEBHOOK_URL)

if __name__ == "__main__":
    import asyncio
    
    asyncio.run(set_webhook())
    app.run_webhook(
        listen="0.0.0.0",
        port=8000,
        url_path="/webhook",
        webhook_url=WEBHOOK_URL,
    )
